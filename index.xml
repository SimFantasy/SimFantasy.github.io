<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SimFantasy</title><link>http://localhost/</link><description>Recent content on SimFantasy</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 08 Oct 2023 23:39:26 +0800</lastBuildDate><atom:link href="http://localhost/index.xml" rel="self" type="application/rss+xml"/><item><title>Node 16 Egg</title><link>http://localhost/posts/node-egg/</link><pubDate>Sun, 08 Oct 2023 23:39:26 +0800</pubDate><guid>http://localhost/posts/node-egg/</guid><description>&lt;p>&lt;code>egg.js&lt;/code>是阿里旗下基于&lt;code>node.js&lt;/code>和&lt;code>koa&lt;/code>是一个&lt;code>node&lt;/code>企业级应用开发框架，可以帮助开发团队，和开发人员减少成本。
基于&lt;code>koa2&lt;/code>、&lt;code>es6&lt;/code>、&lt;code>es7&lt;/code>使得&lt;code>node&lt;/code>具有更有规范的开发模式，更低的学习成本、更优雅的代码、更少的维护成本。&lt;/p></description></item><item><title>Node 15 Mongoose</title><link>http://localhost/posts/node-mongoose/</link><pubDate>Sun, 08 Oct 2023 23:37:56 +0800</pubDate><guid>http://localhost/posts/node-mongoose/</guid><description>&lt;p>&lt;code>Mongoose&lt;/code> 是一款使用 &lt;code>Javascript&lt;/code> 操作 &lt;code>MongoDB&lt;/code> 的 &lt;code>ORM&lt;/code> 框架。&lt;/p></description></item><item><title>Node 14 Mongodb</title><link>http://localhost/posts/node-mongodb/</link><pubDate>Sun, 08 Oct 2023 23:36:15 +0800</pubDate><guid>http://localhost/posts/node-mongodb/</guid><description>&lt;p>&lt;code>MongoDB&lt;/code> 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的 &lt;code>NoSql&lt;/code> 数据库。他支持的数据结构非常松散，是类似 &lt;code>json&lt;/code> 的 &lt;code>bson&lt;/code> 语法，因此可以存储比较复杂的数据类型。&lt;code>Mongodb&lt;/code> 最大的特点是他支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。它的特点是高性能、易部署、易使用，存储数据非常方便。&lt;/p></description></item><item><title>Node 13 日志记录</title><link>http://localhost/posts/node-log/</link><pubDate>Sun, 08 Oct 2023 23:34:43 +0800</pubDate><guid>http://localhost/posts/node-log/</guid><description>&lt;p>使用&lt;code>log4js&lt;/code>来进行项目的日志记录，&lt;code>express&lt;/code>和&lt;code>koa&lt;/code>的&lt;code>morgan&lt;/code>日志记录过于简单，很多东西无法更好的来记录。&lt;/p></description></item><item><title>Node 12 数据验证</title><link>http://localhost/posts/node-validator/</link><pubDate>Sun, 08 Oct 2023 23:33:17 +0800</pubDate><guid>http://localhost/posts/node-validator/</guid><description>&lt;p>数据验证有两个库 &lt;a href="https://github.com/validatorjs/validator.js" target="_blank">&lt;code>validator&lt;/code>&lt;/a> 和 &lt;a href="http://validatejs.org/" target="_blank">&lt;code>validate.js&lt;/code>&lt;/a>&lt;/p>
&lt;p>&lt;code>validator&lt;/code>是一个字符串的验证库，使用上比较简单，但模板代码会比较多，但验证内容上较丰富。&lt;/p>
&lt;p>&lt;code>validator.js&lt;/code>是一个对象的验证库，使用和代码比较简单，但验证内容上不如&lt;code>validate &lt;/code>丰富，一些内容的验证需要自己写正则，但功能比较强大。&lt;/p></description></item><item><title>Node 11 ORM Prisma</title><link>http://localhost/posts/node-prisma/</link><pubDate>Sun, 08 Oct 2023 23:30:42 +0800</pubDate><guid>http://localhost/posts/node-prisma/</guid><description>&lt;p>&lt;code>Prisma&lt;/code> 是一个开源的数据库工具链项目，不仅仅是一个简单的 &lt;code>ORM&lt;/code> 工具。它支持的数据库有 &lt;code>PostgreSQL&lt;/code>、&lt;code>MySQL&lt;/code>、&lt;code>MongoDB&lt;/code>、&lt;code>SQL Server&lt;/code>和&lt;code>SQLite&lt;/code>，示例使用 &lt;code>Koa2 + MySQL&lt;/code> 进行说明。&lt;/p></description></item><item><title>Node 10 ORM Sequelize</title><link>http://localhost/posts/node-sequelize/</link><pubDate>Sun, 08 Oct 2023 23:29:03 +0800</pubDate><guid>http://localhost/posts/node-sequelize/</guid><description>&lt;p>&lt;code>Sequelize&lt;/code> 是一个基于 &lt;code>promise&lt;/code> 的 &lt;code>Node.js ORM&lt;/code>，目前支持 &lt;code>Postgres&lt;/code>、&lt;code>MySQL&lt;/code>、&lt;code>MariaDB&lt;/code>、 &lt;code>SQLite&lt;/code> 以及 &lt;code>Microsoft SQL Server&lt;/code>。它具有强大的事务支持，关联关系, 预读和延迟加载,读取复制等功能。&lt;/p>
&lt;p>&lt;code>Sequelize&lt;/code> 遵从 语义版本控制。 支持 &lt;code>Node v10&lt;/code> 及更高版本以便使用 &lt;code>ES6&lt;/code> 功能。&lt;/p></description></item><item><title>Node 09 其他模块</title><link>http://localhost/posts/node-other-module/</link><pubDate>Sun, 08 Oct 2023 23:23:23 +0800</pubDate><guid>http://localhost/posts/node-other-module/</guid><description>&lt;p>Node除了Express和Koa两个框架，做项目还需要一些其他的模块支持。&lt;/p></description></item><item><title>Node 08 Koa 框架</title><link>http://localhost/posts/node-koa/</link><pubDate>Sun, 08 Oct 2023 23:20:43 +0800</pubDate><guid>http://localhost/posts/node-koa/</guid><description>&lt;p>&lt;code>koa&lt;/code> 是由 &lt;code>Express&lt;/code> 原班人马打造的，致力于成为一个更小、更富有表现力、更健壮的 &lt;code>Web&lt;/code> 框架。使用 &lt;code>koa&lt;/code> 编写 &lt;code>web&lt;/code> 应用，通过组合不同的 &lt;code>generator&lt;/code>，可以免除重复繁琐的回调函数嵌套，并极大地提升错误处理的效率。&lt;code>koa&lt;/code> 不在内核方法中绑定任何中间件，它仅仅提供了一个轻量优雅的函数库，使得编写 &lt;code>Web&lt;/code> 应用变得得心应手。&lt;/p></description></item><item><title>Node 07 Express 框架</title><link>http://localhost/posts/node-express/</link><pubDate>Sun, 08 Oct 2023 23:19:10 +0800</pubDate><guid>http://localhost/posts/node-express/</guid><description>&lt;p>&lt;code>Express&lt;/code> 是 &lt;code>Node.js&lt;/code> 最受欢迎的 &lt;code>Web&lt;/code> 应用框架之一。它提供了简洁而灵活的方式来构建 &lt;code>Web&lt;/code> 服务器和 &lt;code>API&lt;/code>。&lt;code>Express&lt;/code> 提供了一组强大的工具和功能，使得开发 &lt;code>Web&lt;/code> 应用变得简单而高效。&lt;/p></description></item><item><title>Node 06 Http 服务</title><link>http://localhost/posts/node-http/</link><pubDate>Sun, 08 Oct 2023 23:12:47 +0800</pubDate><guid>http://localhost/posts/node-http/</guid><description>&lt;h3 id="什么是web服务器">什么是web服务器&lt;a class="anchorjs-link" href="#%e4%bb%80%e4%b9%88%e6%98%afweb%e6%9c%8d%e5%8a%a1%e5%99%a8">&lt;/a>&lt;/h3>&lt;p>当应用程序（客户端）需要某一个资源时，可以向一个台服务器，通过Http请求获取到这个资源；提供资源的这个服务器，就是一个Web服务器；&lt;/p></description></item><item><title>Node 05 Stream 流</title><link>http://localhost/posts/node-stream/</link><pubDate>Sun, 08 Oct 2023 23:00:55 +0800</pubDate><guid>http://localhost/posts/node-stream/</guid><description>&lt;p>程序中的&lt;code>stream(流)&lt;/code>可以想象当我们从一个文件中读取数据时，文件的二进制（字节）数据会源源不断的被读取到我们程序中，而这个一连串的字节，就是我们程序中的流。&lt;/p>
&lt;ul>
&lt;li>是连续字节的一种表现形式和抽象概念&lt;/li>
&lt;li>流应该是可读的，也是可写的&lt;/li>
&lt;/ul></description></item><item><title>Node 04 Buffer 类</title><link>http://localhost/posts/node-buffer/</link><pubDate>Sun, 08 Oct 2023 22:51:31 +0800</pubDate><guid>http://localhost/posts/node-buffer/</guid><description>&lt;p>计算机中所有的内容：文字、数字、图片、音频、视频最终都会使用二进制来表示。&lt;/p>
&lt;p>服务器要处理的本地文件类型相对较多，比如某一个保存文本的文件并不是使用 utf-8进行编码的，而是用 GBK，那么我们必须读取到他们的二进制数据，再通过GKB转换成对应的文字。对于服务器端为了做很多的功能，我们必须直接去操作其二进制的数据。所以Node为了可以方便开发者完成更多功能，提供给了我们一个类Buffer，并且它是全局的。&lt;/p>
&lt;p>在服务器端都需要现将本地文件转为Buffer的二进制格式，然后处理完成后再写入到对应的文件中。&lt;/p></description></item><item><title>Node 03 Events 模块</title><link>http://localhost/posts/node-events/</link><pubDate>Sun, 08 Oct 2023 22:48:38 +0800</pubDate><guid>http://localhost/posts/node-events/</guid><description>&lt;p>&lt;code>Node&lt;/code>中的核心&lt;code>API&lt;/code>都是基于异步事件驱动的：&lt;/p>
&lt;ul>
&lt;li>在这个体系中，某些对象（发射器（&lt;code>Emitters&lt;/code>））发出某一个事件；&lt;/li>
&lt;li>我们可以监听这个事件（监听器&lt;code> Listeners&lt;/code>），并且传入的回调函数，这个回调函数会在监听到事件时调用；&lt;/li>
&lt;/ul></description></item><item><title>Node 02 Fs 模块</title><link>http://localhost/posts/node-fs/</link><pubDate>Sun, 08 Oct 2023 22:44:13 +0800</pubDate><guid>http://localhost/posts/node-fs/</guid><description>&lt;p>&lt;code>fs&lt;/code>是&lt;code>File System&lt;/code>的缩写，表示文件系统。&lt;code>node:fs&lt;/code> 模块能够以标准 POSIX 函数为模型的方式与文件系统进行交互。&lt;/p>
&lt;p>所有文件系统操作都具有同步、回调和基于 &lt;code>promise&lt;/code> 的形式，并且可以使用 &lt;code>CommonJS&lt;/code> 语法和 &lt;code>ES6&lt;/code> 模块进行访问。&lt;/p>
&lt;ol>
&lt;li>同步操作文件，代码会被阻塞，当文件操作代码执行完成，从会继续执行后面的代码。&lt;/li>
&lt;li>异步回调函数操作文件，代码不会被阻塞，需要传入回调函数，当获取到结果时，回调函数被执行。&lt;/li>
&lt;li>异步&lt;code>Pormise&lt;/code>操作文件，代码不会被阻塞，通过&lt;code>fs.promises&lt;/code>调用方法操作，会返回一个&lt;code>promise&lt;/code>，可以通过&lt;code>then&lt;/code>、&lt;code>catch&lt;/code>进行处理。&lt;/li>
&lt;/ol></description></item><item><title>Node 01 Path 模块</title><link>http://localhost/posts/node-path/</link><pubDate>Sun, 08 Oct 2023 22:16:48 +0800</pubDate><guid>http://localhost/posts/node-path/</guid><description>&lt;p>path（路径）模块，用于处理文件和目录路径。&lt;/p></description></item><item><title>React状态横评</title><link>http://localhost/posts/react%E7%8A%B6%E6%80%81%E6%A8%AA%E8%AF%84/</link><pubDate>Thu, 05 Oct 2023 00:41:17 +0000</pubDate><guid>http://localhost/posts/react%E7%8A%B6%E6%80%81%E6%A8%AA%E8%AF%84/</guid><description>&lt;h3 id="从redux说起">从Redux说起&lt;a class="anchorjs-link" href="#%e4%bb%8eredux%e8%af%b4%e8%b5%b7">&lt;/a>&lt;/h3>&lt;p>吐槽：&lt;code>Redux&lt;/code>是&lt;code>React&lt;/code>绕不过的坑，一个据说不是&lt;code>React&lt;/code>专属的状态库（现在大部分js框架都是全家桶的年代），大量模板代码，过于复杂的学习曲线，总让我们感到困扰。&lt;/p>
&lt;p>一个点击计数的&lt;code>state&lt;/code>，在&lt;code>Redux&lt;/code>中通常需要写&lt;code>store/index.js&lt;/code>，&lt;code>store/reducer.js&lt;/code>，&lt;code>store/actionCreator.js&lt;/code>，&lt;code>store/constants.js&lt;/code>四个文件，然后在全局通过&lt;code>Provider&lt;/code>进行连接，在调用的页面还需要通过&lt;code>connect&lt;/code>高阶进行包裹，然后通过props来映射，才能使用。&lt;/p>
&lt;p>异步操作还需要通过第三方&lt;code>redux-thunk&lt;/code>或&lt;code>redux-saga&lt;/code>来实现。&lt;/p>
&lt;p>所以对于这种时常会用到时常会用到但又不想去用的东西我们总是又爱又恨。好在&lt;code>React&lt;/code>的生态是丰富的，总会有更多的好用的工具出现。&lt;/p>
&lt;p>下面我们来看下现在比较流行的&lt;code>RTK&lt;/code>和&lt;code>Zustand&lt;/code>，以及我比较喜欢的&lt;code>Valtio&lt;/code>，通过一个相同的案例（多个状态统一管理、本地计数、异步数据、异步数据传参）对这三个状态库在&lt;strong>功能层面&lt;/strong>上进行比较下，看下各自的优缺点。&lt;/p>
&lt;p>实现方式：通过三个文件来写本地计数&lt;code>store/modules/counter.js&lt;/code>，异步获取数据&lt;code>store/modules/post.js&lt;/code>，异步数据传参&lt;code>store/modules/user.js&lt;/code>。通过&lt;code>store/index.js&lt;/code>来对多个状态进行统一管理导出。&lt;/p>
&lt;p>最终实现效果：&lt;/p>
&lt;p>&lt;figure>
&lt;a class="paragraph-image">
&lt;img data-src="https://p.sda1.dev/12/9ee1d5dc474cec7a6c675ada29674278/image.png" data-action="zoom" alt="最终效果" class="lazyload">
&lt;/a>
&lt;/figure>&lt;/p></description></item><item><title>TypeScript 进阶</title><link>http://localhost/posts/typescript-%E8%BF%9B%E9%98%B6/</link><pubDate>Thu, 05 Oct 2023 00:29:00 +0000</pubDate><guid>http://localhost/posts/typescript-%E8%BF%9B%E9%98%B6/</guid><description>&lt;h3 id="面相对象">面相对象&lt;a class="anchorjs-link" href="#%e9%9d%a2%e7%9b%b8%e5%af%b9%e8%b1%a1">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;code>TS&lt;/code>为前端面向对象开发带来了契机&lt;/p>
&lt;p>&lt;code>JS&lt;/code>语言没有类型检查，如果使用面向对象的方式开发，会产生大量的接口，而大量的接口会导致调用复杂度剧增，这种复杂度必须通过严格的类型检查来避免错误，尽管可以使用注释或文档或记忆力，但是它们没有强约束力。&lt;/p>
&lt;p>&lt;code>TS&lt;/code>带来了完整的类型系统，因此开发复杂程序时，无论接口数量有多少，都可以获得完整的类型检查，并且这种检查是据有强约束力的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>面向对象中有许多非常成熟的模式，能处理复杂问题&lt;/p>
&lt;p>在过去的很多年中，在大型应用或复杂领域，面向对象已经积累了非常多的经验。&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>TypeScript 基础</title><link>http://localhost/posts/typescript-%E5%9F%BA%E7%A1%80/</link><pubDate>Thu, 05 Oct 2023 00:26:45 +0000</pubDate><guid>http://localhost/posts/typescript-%E5%9F%BA%E7%A1%80/</guid><description>&lt;h3 id="javascript的问题">JavaScript的问题&lt;a class="anchorjs-link" href="#javascript%e7%9a%84%e9%97%ae%e9%a2%98">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>使用了不存在的变量、函数或成员&lt;/li>
&lt;li>把一个不确定的类型当作一个确定的类型处理&lt;/li>
&lt;li>在使用null或undefined的成员&lt;/li>
&lt;/ul></description></item><item><title>Query Key Factory - React Query 的 QueryKey 查询管理工具</title><link>http://localhost/posts/react-query-key-factory/</link><pubDate>Thu, 18 May 2023 17:47:04 +0000</pubDate><guid>http://localhost/posts/react-query-key-factory/</guid><description>&lt;p>在使用&lt;code>react-query&lt;/code>做了几个项目以后，就感觉&lt;code>react-query&lt;/code>中的查询和请求状态管理非常方便。但逐渐发现对&lt;code>react-query&lt;/code>的使用需求在逐步发生变化：&lt;/p>
&lt;ol>
&lt;li>基本需求就是对异步数据获取的状态进行管理。&lt;/li>
&lt;li>获取到数据，&lt;code>react-query&lt;/code>对数据进行缓存后，需要对缓存数据进行管理。&lt;/li>
&lt;li>当需要进行数据交互通过&lt;code>useMutation&lt;/code>获取到新的数据时，就需要通过之前查询数据的&lt;code>useQuery&lt;/code>的&lt;code>queryKey&lt;/code>修改缓存数据，通过&lt;code>query client&lt;/code>中的&lt;code>setQueryData&lt;/code>来修改缓存，或者使用&lt;code>invalidateQueries&lt;/code>来使对应查询的&lt;code>queryKey&lt;/code>让缓存失效来重新获取数据，最终就变成对&lt;code>queryKey&lt;/code>的管理。&lt;/li>
&lt;/ol></description></item><item><title>如何在一台电脑上配置多个Github SSH</title><link>http://localhost/posts/%E5%A6%82%E4%BD%95%E5%9C%A8%E4%B8%80%E5%8F%B0%E7%94%B5%E8%84%91%E4%B8%8A%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAgithub-ssh/</link><pubDate>Fri, 05 May 2023 19:37:12 +0000</pubDate><guid>http://localhost/posts/%E5%A6%82%E4%BD%95%E5%9C%A8%E4%B8%80%E5%8F%B0%E7%94%B5%E8%84%91%E4%B8%8A%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAgithub-ssh/</guid><description>&lt;p>因为遇到需要使用两个github账号来做不同账号的代码同步，于是学习了下。主要解决同一台电脑上两个github账号切换的问题。
如果已经有主账号了，不需要再次生成，下面仅为副账号生成设置步骤。&lt;/p></description></item><item><title>React Route 6.4功能</title><link>http://localhost/posts/react-route-6-4%E5%8A%9F%E8%83%BD/</link><pubDate>Thu, 02 Feb 2023 18:23:37 +0000</pubDate><guid>http://localhost/posts/react-route-6-4%E5%8A%9F%E8%83%BD/</guid><description>&lt;p>React Route 最近更新到了6.8，在6.4的版本中增加了一些新功能。应该是借鉴了remix的一些功能吧，毕竟是一个系统的产品。开发中的内卷逐渐在产品中体现了出来。&lt;/p></description></item><item><title>快速生成自己的色板样式模板</title><link>http://localhost/posts/%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E8%87%AA%E5%B7%B1%E7%9A%84%E8%89%B2%E6%9D%BF%E6%A0%B7%E5%BC%8F%E6%A8%A1%E6%9D%BF/</link><pubDate>Thu, 12 Jan 2023 11:50:26 +0000</pubDate><guid>http://localhost/posts/%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E8%87%AA%E5%B7%B1%E7%9A%84%E8%89%B2%E6%9D%BF%E6%A0%B7%E5%BC%8F%E6%A8%A1%E6%9D%BF/</guid><description>&lt;p>之前有写过文章，使用 &lt;a href="https://simfantasy.github.io/2022/12/14/%E4%BD%BF%E7%94%A8CSS%E5%8F%98%E9%87%8F%E7%BB%99%E9%A1%B5%E9%9D%A2%E6%B7%BB%E5%8A%A0%E6%9A%97%E9%BB%91%E6%A8%A1%E5%BC%8F/" target="_blank">使用CSS变量给页面添加暗黑模式&lt;/a>，本文算是前面这篇文章的补充吧，每次都要搞一堆不同颜色的色板也很是麻烦，体力活总有办法优化的。&lt;/p>
&lt;p>借助&lt;code>ant-design/colors&lt;/code>这个包，能帮助我们快速实现色板。&lt;/p></description></item><item><title>使用CSS变量给页面添加暗黑模式</title><link>http://localhost/posts/%E4%BD%BF%E7%94%A8css%E5%8F%98%E9%87%8F%E7%BB%99%E9%A1%B5%E9%9D%A2%E6%B7%BB%E5%8A%A0%E6%9A%97%E9%BB%91%E6%A8%A1%E5%BC%8F/</link><pubDate>Wed, 14 Dec 2022 15:56:09 +0000</pubDate><guid>http://localhost/posts/%E4%BD%BF%E7%94%A8css%E5%8F%98%E9%87%8F%E7%BB%99%E9%A1%B5%E9%9D%A2%E6%B7%BB%E5%8A%A0%E6%9A%97%E9%BB%91%E6%A8%A1%E5%BC%8F/</guid><description>&lt;p>之前有使用&lt;code>Styled Components&lt;/code>的方式在页面中添加主题 &lt;a href="https://simfantasy.github.io/2022/07/29/Styled-Components-Context-%E6%89%93%E9%80%A0%E4%B8%BB%E9%A2%98%E5%88%87%E6%8D%A2/" target="_blank">Styled Components + Context 打造主题切换&lt;/a>，但是过于繁琐和麻烦。于是之前又学习了下&lt;code>Chakra&lt;/code>的暗黑模式，感觉也很麻烦，对于不想用&lt;code>Chakra&lt;/code>框架，这种方式就很麻烦。前两天正好看到B站一小哥说这个用&lt;code>CSS变量&lt;/code>的方式添加暗黑模式，遂学习了下，果然方便太多。&lt;/p></description></item><item><title>ChakraUI 暗黑模式切换</title><link>http://localhost/posts/chakraui-%E6%9A%97%E9%BB%91%E6%A8%A1%E5%BC%8F%E5%88%87%E6%8D%A2/</link><pubDate>Sat, 03 Dec 2022 14:30:33 +0000</pubDate><guid>http://localhost/posts/chakraui-%E6%9A%97%E9%BB%91%E6%A8%A1%E5%BC%8F%E5%88%87%E6%8D%A2/</guid><description>&lt;p>使用ChakraUI可以快速切换暗黑模式。并且可以用来做主题切换，提供了一系列的钩子和函数使用起来非常方便。&lt;/p></description></item><item><title>Firebase学习笔记之Auth和storage</title><link>http://localhost/posts/firebase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bauth%E5%92%8Cstorage/</link><pubDate>Thu, 10 Nov 2022 16:33:22 +0000</pubDate><guid>http://localhost/posts/firebase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bauth%E5%92%8Cstorage/</guid><description>这里主要记录下Auth这块的使用。功能上基本同之前的NextAuth差不多。但是 Firebase 并不是一个单一的权限系统，和数据等很多功能整合在一起了，所</description></item><item><title>Firebase学习笔记之Firestore</title><link>http://localhost/posts/firebase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bfirestore/</link><pubDate>Thu, 10 Nov 2022 16:32:52 +0000</pubDate><guid>http://localhost/posts/firebase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bfirestore/</guid><description>&lt;p>&lt;code>Firebase&lt;/code>是&lt;code>Google&lt;/code>的一个线上数据服务，提供在线的数据库和权限、资源存储等。这次一起来学习一下。&lt;/p>
&lt;p>教程可以参考 The Net Ninja 大神的&lt;a href="https://www.youtube.com/playlist?list=PL4cUxeGkcC9jERUGvbudErNCeSZHWUVlb" target="_blank">Firebase 9 Tutorial&lt;/a>&lt;/p>
&lt;p>因为&lt;code>Firebase&lt;/code>的内容太多，我们分了两个部分。这个部分是数据的&lt;code>CURD&lt;/code>。&lt;/p>
&lt;p>‍&lt;/p></description></item><item><title>网易云音乐常用API</title><link>http://localhost/posts/%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E5%B8%B8%E7%94%A8api/</link><pubDate>Thu, 03 Nov 2022 17:22:36 +0000</pubDate><guid>http://localhost/posts/%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E5%B8%B8%E7%94%A8api/</guid><description>&lt;p>经常会拿网易云音乐的API做些测试，每次找接口都要找半天，索性自己整理下经常会用到的，方便以后使用。都是大神们的接口，仅做分类整理。&lt;/p></description></item><item><title>Styled-components中使用媒体查询</title><link>http://localhost/posts/styled-components%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2/</link><pubDate>Sat, 29 Oct 2022 21:03:46 +0000</pubDate><guid>http://localhost/posts/styled-components%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2/</guid><description>&lt;p>&lt;code>styled-components&lt;/code>和&lt;code>emotion&lt;/code>中作媒体查询很麻烦，不如&lt;code>scss&lt;/code>中的&lt;code>mixin&lt;/code>来的简单。从&lt;code>emotion&lt;/code>上找到一个包&lt;code>facepaint&lt;/code>，能在一定程度上优化代码，减少代码量，但也不能像正常写&lt;code>css&lt;/code>那样去写样式了，只能用驼峰的方式写成对象形式的样式。我们来分别看下这三种方式的媒体查询：&lt;/p></description></item><item><title>Auth0身份验证</title><link>http://localhost/posts/auth0%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/</link><pubDate>Thu, 27 Oct 2022 11:38:14 +0000</pubDate><guid>http://localhost/posts/auth0%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/</guid><description>&lt;p>Auth0是一个第三方身份验证的工具。通过配置可以调用Auth0的注册、登录，配置指定回调地址就可以很快实现身份验证的功能。&lt;/p></description></item><item><title>React Query学习笔记</title><link>http://localhost/posts/react-query%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link><pubDate>Fri, 21 Oct 2022 14:43:34 +0000</pubDate><guid>http://localhost/posts/react-query%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid><description>&lt;p>终于二刷了 Codevolution 大佬的这个系列，感觉比第一次确实是有了更多的理解。配合之前的&lt;code>foromik&lt;/code>使用杠杠滴~&lt;/p>
&lt;p>教程地址：&lt;a href="https://www.youtube.com/playlist?list=PLC3y8-rFHvwjTELCrPrcZlo6blLBUspd2" target="_blank">React Query Tutorial for Beginners&lt;/a>&lt;/p>
&lt;p>ReactQuery 官方地址：&lt;a href="https://tanstack.com/" target="_blank">ReactQuery&lt;/a>&lt;/p>
&lt;p>部分中文文档地址：&lt;a href="https://cangsdarm.github.io/react-query-web-i18n/" target="_blank">Tanstact Query 中文文档&lt;/a>&lt;/p></description></item><item><title>Formik学习笔记之二</title><link>http://localhost/posts/formik%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%BA%8C/</link><pubDate>Tue, 18 Oct 2022 11:34:02 +0000</pubDate><guid>http://localhost/posts/formik%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%BA%8C/</guid><description>&lt;p>这部分主要是示例练习。将&lt;code>input&lt;/code>、&lt;code>textarea&lt;/code>、&lt;code>select&lt;/code>、&lt;code>radio&lt;/code>、&lt;code>checkbox&lt;/code>、&lt;code>data&lt;/code>封装成&lt;code>Formik&lt;/code>的组件，在使用时简化操作，并在几个简单的案例中使用。&lt;/p>
&lt;p>‍&lt;/p></description></item><item><title>Formik学习笔记之一</title><link>http://localhost/posts/formik%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%B8%80/</link><pubDate>Tue, 18 Oct 2022 11:33:46 +0000</pubDate><guid>http://localhost/posts/formik%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%B8%80/</guid><description>&lt;p>继续挖Codevolution大佬的教程。form在很多场景都会用到，最少都是一个登录注册。使用Formik可以大大简化数据收集以及表单验证的过程。油管上大佬教程的地址奉上：&lt;/p>
&lt;p>&lt;a href="https://www.youtube.com/playlist?list=PLC3y8-rFHvwiPmFbtzEWjESkqBVDbdgGu" target="_blank">React Formik Tutorial&lt;/a>&lt;/p>
&lt;p>结合&lt;code>react-query&lt;/code>提交表单数据很犀利。&lt;/p></description></item><item><title>Strapi用户登录鉴权</title><link>http://localhost/posts/strapi%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E9%89%B4%E6%9D%83/</link><pubDate>Wed, 12 Oct 2022 11:48:49 +0000</pubDate><guid>http://localhost/posts/strapi%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E9%89%B4%E6%9D%83/</guid><description>&lt;p>延续之前Strapi的使用，Strapi已经做了很完整的权限，并且给了API，所以结合之前的博客内容，完成对应的登录、注册与鉴权。&lt;/p>
&lt;p>之前博客在公共模式&lt;code>Public&lt;/code>下是可以直接访问到对应的文章，这次我们取消&lt;code>Public&lt;/code>的&lt;code>find&lt;/code>和&lt;code>findone&lt;/code>的权限。并给&lt;code>Authenticated&lt;/code>配置对应的&lt;code>Post&lt;/code>权限。在&lt;code>Strapi&lt;/code>中调整完成后开始代码。&lt;/p>
&lt;p>‍&lt;/p></description></item><item><title>Strapi + Graphql 使用小记</title><link>http://localhost/posts/strapi-graphql-%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%AE%B0/</link><pubDate>Sat, 08 Oct 2022 23:46:56 +0000</pubDate><guid>http://localhost/posts/strapi-graphql-%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%AE%B0/</guid><description>&lt;p>NextJs已经学了，需要搞个项目练下手，看到油管上很多NextJs+Strapi的视频，因为之前也看过相关的视频，但没有仔细研究，这次刚好十一，抓紧时间看了下。Strapi还是个很犀利的工具，感觉后面可以多用这个来做些东西。&lt;/p></description></item><item><title>NextJS重新学习之三</title><link>http://localhost/posts/nextjs%E9%87%8D%E6%96%B0%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%B8%89/</link><pubDate>Sat, 01 Oct 2022 00:45:09 +0000</pubDate><guid>http://localhost/posts/nextjs%E9%87%8D%E6%96%B0%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%B8%89/</guid><description>&lt;p>这个是一个用户身份验证的示例。&lt;/p>
&lt;p>NextJs提供了一个身份验证的库&lt;code>next auth&lt;/code>，使用这个库可以很轻松的做身份验证。&lt;/p>
&lt;p>示例使用Github的用户身份登录。&lt;/p>
&lt;p>由于版本问题，跟视频里说的一些内容有出入。根据官方文档来做了调整，代码做了很多优化，写起来更少了。&lt;/p></description></item><item><title>NextJS重新学习之二</title><link>http://localhost/posts/nextjs%E9%87%8D%E6%96%B0%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BA%8C/</link><pubDate>Sat, 01 Oct 2022 00:44:49 +0000</pubDate><guid>http://localhost/posts/nextjs%E9%87%8D%E6%96%B0%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BA%8C/</guid><description>&lt;p>NextJs学习笔记第二部分。基础知识，接上一篇。&lt;/p></description></item><item><title>NextJS重新学习之一</title><link>http://localhost/posts/nextjs%E9%87%8D%E6%96%B0%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%B8%80/</link><pubDate>Sat, 01 Oct 2022 00:44:27 +0000</pubDate><guid>http://localhost/posts/nextjs%E9%87%8D%E6%96%B0%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%B8%80/</guid><description>&lt;p>国内的NextJs资料太少了，B站上找了下讲的很少，官网又是一个挂着中文文档的英文文档。在YouTube上找了下，英文的资料还是很多。&lt;/p>
&lt;p>找到了这个&lt;code>Codevolution&lt;/code>大神的教程，79个视频的播放列表。&lt;/p>
&lt;p>&lt;a href="https://www.youtube.com/playlist?list=PLC3y8-rFHvwgC9mj0qv972IO5DmD-H0ZH" target="_blank">Next.js Tutorial for Beginners&lt;/a>&lt;/p>
&lt;p>以下是学习笔记。&lt;/p></description></item><item><title>使用vite-pretty-lint更加快速的配置ESLint和Prettier</title><link>http://localhost/posts/%E4%BD%BF%E7%94%A8vite-pretty-lint%E6%9B%B4%E5%8A%A0%E5%BF%AB%E9%80%9F%E7%9A%84%E9%85%8D%E7%BD%AEeslint%E5%92%8Cprettier/</link><pubDate>Tue, 13 Sep 2022 22:37:50 +0000</pubDate><guid>http://localhost/posts/%E4%BD%BF%E7%94%A8vite-pretty-lint%E6%9B%B4%E5%8A%A0%E5%BF%AB%E9%80%9F%E7%9A%84%E9%85%8D%E7%BD%AEeslint%E5%92%8Cprettier/</guid><description>&lt;p>有的时候就是遇到麻烦了才回去想解决办法。这不，今天在公司装了1个小时的ESLint，魔障了一样，就是有问题。于是回家的路上看了下有没有类似的解决办法，就看到了这个神器——&lt;code>vite-pretty-lint&lt;/code>&lt;/p></description></item><item><title>攒个Icon组件2.0</title><link>http://localhost/posts/%E6%94%92%E4%B8%AAicon%E7%BB%84%E4%BB%B62-0/</link><pubDate>Fri, 19 Aug 2022 23:52:17 +0000</pubDate><guid>http://localhost/posts/%E6%94%92%E4%B8%AAicon%E7%BB%84%E4%BB%B62-0/</guid><description>&lt;p>上周看到vant react版升到了3，发现弄了很多新东西，其中就有将所有的Icon都换成了svg的了。于是研究了下，传统的fonts和css的组合似乎，因为字体文件的存在，打包会影响包体积，所以用svg加上打包工具的Tree Shaking，只需要将用到的图标保留，没用的不打包进去就可以了。另外，svg的矢量显示效果比字体图标显示效果更好，所以，svg将会是以后更多的选择。&lt;/p></description></item><item><title>Object.entries方法</title><link>http://localhost/posts/object-entries%E6%96%B9%E6%B3%95/</link><pubDate>Mon, 08 Aug 2022 11:40:59 +0000</pubDate><guid>http://localhost/posts/object-entries%E6%96%B9%E6%B3%95/</guid><description>&lt;p>最近在做Mac版的Netease Music的项目，在参考大佬的源码的时候看到了这个方法&lt;code>Object.entries&lt;/code>，感觉甚妙，故记录之。&lt;/p>
&lt;p>在项目中，有个歌单分类，返回的数据中，一组为一级分类的对象，一组为二级分类的数组。二级分类上有一级分类的值。&lt;/p>
&lt;p>参考地址：&lt;a href="https://netease-cloud-music-api-one-peach.vercel.app/playlist/catlist" target="_blank">歌单分类API&lt;/a>&lt;/p></description></item><item><title>Styled Components + Context 打造主题切换</title><link>http://localhost/posts/styled-components-context-%E6%89%93%E9%80%A0%E4%B8%BB%E9%A2%98%E5%88%87%E6%8D%A2/</link><pubDate>Fri, 29 Jul 2022 10:32:19 +0000</pubDate><guid>http://localhost/posts/styled-components-context-%E6%89%93%E9%80%A0%E4%B8%BB%E9%A2%98%E5%88%87%E6%8D%A2/</guid><description>&lt;p>这两天在看&lt;code>Mantine&lt;/code>，里面有自带的主题切换，试了下，感觉过于复杂&lt;code>context&lt;/code>的&lt;code>Privoder&lt;/code>都要包两层，另外&lt;code>Mantine&lt;/code>的css in js 方案使用的是&lt;code>emotion&lt;/code>，过于小众和繁琐，不如在&lt;code>styled-components&lt;/code>中写&lt;code>css&lt;/code>的流畅。所以翻了很久掘金挖宝，果然挖到一宝。Up是椒盐味花生米，使用&lt;code>context&lt;/code>修改&lt;code>styled-components&lt;/code>的&lt;code>GlobalStyle&lt;/code>，并且将配色方案保存在&lt;code>localstorage&lt;/code>中，重启浏览器效果依然得以保存。但是他的方案使用的是&lt;code>redux toolkit&lt;/code>，并且只能切换明亮和暗黑两种主题，我改成了&lt;code>mobx&lt;/code>和多主题，本来想用更轻量的&lt;code>Jotai&lt;/code>状态库来试下的，但是&lt;code>Jotai&lt;/code>还没摸透，等下次吧。&lt;/p></description></item><item><title>攒个Icon组件</title><link>http://localhost/posts/%E6%94%92%E4%B8%AAicon%E7%BB%84%E4%BB%B6/</link><pubDate>Thu, 28 Jul 2022 11:17:17 +0000</pubDate><guid>http://localhost/posts/%E6%94%92%E4%B8%AAicon%E7%BB%84%E4%BB%B6/</guid><description>&lt;p>经常会用到RemixIcon的图标，所以每次都得整半天，所以干脆攒个Icon的组件好了，下次直接用。&lt;/p></description></item><item><title>React Router v6 组件懒加载</title><link>http://localhost/posts/react-router-v6-%E7%BB%84%E4%BB%B6%E6%87%92%E5%8A%A0%E8%BD%BD/</link><pubDate>Wed, 27 Jul 2022 23:34:40 +0000</pubDate><guid>http://localhost/posts/react-router-v6-%E7%BB%84%E4%BB%B6%E6%87%92%E5%8A%A0%E8%BD%BD/</guid><description>&lt;p>还是React Router V6，在v5的时候组件懒加载只需要在路由页面使用&lt;code>lazy&lt;/code>方法&lt;code>import&lt;/code>组件后，然后在App组件外层包一层&lt;code>Suspense&lt;/code>后就可以实现了，在v6里就搞得很麻烦，因为&lt;code>Suspense&lt;/code>包在了每个路由的外面。&lt;/p></description></item><item><title>React Router V6 三级目录跳转</title><link>http://localhost/posts/react-router-v6-%E4%B8%89%E7%BA%A7%E7%9B%AE%E5%BD%95%E8%B7%B3%E8%BD%AC/</link><pubDate>Wed, 27 Jul 2022 23:06:41 +0000</pubDate><guid>http://localhost/posts/react-router-v6-%E4%B8%89%E7%BA%A7%E7%9B%AE%E5%BD%95%E8%B7%B3%E8%BD%AC/</guid><description>&lt;p>之前在做看Coderwhy的网易云音乐的项目时，遇到了一个问题，因为网易云音乐在进入站点后，会从根目录跳转到三级目录下，经过 &lt;code>发现 （Discover）&lt;/code>，到&lt;code>推荐 （recommend）&lt;/code>页面。coderwhy是用的react-router-dom v5的版本，所以使用了react-router-config这个插件，可以render到一个目录下，但react-router-dom v6的版本 react-router-config这个插件就用不了了，只能使用&lt;code>useRoutes&lt;/code>这个来代替之前的集中式路由导航。这个里面并没有render这个方法，一些api也有变化，没有direct，使用Navigate来代替了。总之搞得头很大。&lt;/p>
&lt;p>试了很多方法，v6，在跳转到二级目录后，则不能直接跳转到三级，今天在小破站看到大神介绍v6 的一些功能，受到了一些启发，他是做到页面上的&lt;code>Routes&lt;/code>和&lt;code>Route&lt;/code>路由配置，跟&lt;code>useRoutes&lt;/code>这块的路由还是区别很大，&lt;code>useRouter&lt;/code>这种和&lt;code>vue-router&lt;/code>的配置就很像了。但是还是缺了&lt;code>vue-router&lt;/code>的路由守卫&amp;hellip;&lt;/p></description></item><item><title>React + Vite + ESLint + Prettier</title><link>http://localhost/posts/react-vite-eslint/</link><pubDate>Mon, 25 Jul 2022 18:52:45 +0000</pubDate><guid>http://localhost/posts/react-vite-eslint/</guid><description>&lt;p>Vite到3了，在React中比自带的create-react-app，快太多，用上就基本换不过去的感觉。记录下配置ESLint和Prettier，看了很多教程，配置大多都是和Typescript一起，本人还未到那个层级，只能上JS。废话少说开始干活~&lt;/p></description></item><item><title>Next.js学习笔记</title><link>http://localhost/posts/next-js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link><pubDate>Tue, 14 Jun 2022 16:11:59 +0000</pubDate><guid>http://localhost/posts/next-js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid><description>&lt;p>最近在学习Next，这是一个与React相关的应用框架。最近需要使用Next做项目，所以跟着视频一起学了些东西，本文作为笔记进行记录。&lt;/p>
&lt;p>因为网络上大多视频，时间比较久远，就导致很多代码的框架、模块的版本发送了很多变化，导致很多功能都发生了很大的变化，当然老的技术你可以学，但是新的还是要学的。比如：最近学了Redux，大多视频讲的都是Redux4.x，结果现在redux官方现在推荐使用ReduxToolkit。东西当然优化了很多，没有原来那么麻烦，但是资料也少啊 ，遇到很多问题，还在摸索。&lt;/p>
&lt;p>出现这种情况的还有React，现在网上很多视频打着2022最新教程，讲着React16.13或者17.x的内容，现在React官方已经到了18.x了。看介绍说是优化了很多性能上的东西，但功能也有些调整，还没来得及了解。&lt;/p></description></item><item><title>ElementPlus的坑</title><link>http://localhost/posts/elementplus%E7%9A%84%E5%9D%91/</link><pubDate>Thu, 05 May 2022 09:49:50 +0000</pubDate><guid>http://localhost/posts/elementplus%E7%9A%84%E5%9D%91/</guid><description>&lt;p>记录一下在使用ElementPlus中的一些坑。&lt;/p></description></item><item><title>Pinia使用小结</title><link>http://localhost/posts/pinia%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/</link><pubDate>Fri, 29 Apr 2022 15:56:10 +0000</pubDate><guid>http://localhost/posts/pinia%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/</guid><description>&lt;p>大菠萝Pinia，号称vux5，全新的vue状态管理库。&lt;/p>
&lt;p>个人感受，vuex4.x里面的概念太多了，本来vue就喜欢造概念，一堆一堆学都学不过来。vue4.x里更是繁琐的很，components要DIspatch给Actions，然后Actions要commit给Mutations，当然也可以从commponents给到Mutations，然后Mutaiions要Mutate给State。&lt;/p>
&lt;p>但凡可以 get和set就别造新词了吧，真的记不住~ 搞得我看了好几遍，现在还是没啥概念。&lt;/p>
&lt;p>Pinia就好很多 Actions既可以同步也可以异步，没分开。数据传递也很简单。看着教程就很容易的上手。&lt;/p></description></item><item><title>JavaScript字符串操作整理</title><link>http://localhost/posts/javascript%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E6%95%B4%E7%90%86/</link><pubDate>Fri, 29 Apr 2022 15:36:54 +0000</pubDate><guid>http://localhost/posts/javascript%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E6%95%B4%E7%90%86/</guid><description>&lt;p>基础差就只能慢慢补，这两天把字符串操作的方法整理了下，平常用的也就只有几个，但是一整理就发现有一大堆。&lt;/p>
&lt;p>常用&lt;code>indexOf()&lt;/code>、&lt;code>split()&lt;/code>、&lt;code>slice()&lt;/code>、&lt;code>toLowerCase()&lt;/code>、&lt;code>toUpperCase()&lt;/code>、&lt;code>replace()&lt;/code>、&lt;code>trim()&lt;/code>、&lt;code>padStart()&lt;/code>、&lt;code>parseInt()&lt;/code>&lt;/p></description></item><item><title>CSS垂直居中的完全体</title><link>http://localhost/posts/css%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%84%E5%AE%8C%E5%85%A8%E4%BD%93/</link><pubDate>Mon, 18 Apr 2022 00:58:31 +0000</pubDate><guid>http://localhost/posts/css%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%84%E5%AE%8C%E5%85%A8%E4%BD%93/</guid><description>&lt;p>很久没见到这么干的文章，拉屎的时候刷到让我便意似乎没了。赶紧拜读了一遍，默默关注了大神。&lt;/p>
&lt;p>原来面试的时候经常会问这个问题，大多数能讲出三四个我已经觉得很了不起了。我自己也大概只知道五六种，感觉前端的发展太快很多东西学不动只能让自己不断落后。所以该记录的记录下来，该改进的改进改进，逆水行舟冷暖自知。&lt;/p>
&lt;p>水平居中比较简单，垂直居中由于浏览器的原因会有很多差异，如果用上flex幸福感会提升很多，考虑到兼容性，似乎就没那么多幸福了&amp;hellip;&lt;/p>
&lt;p>垂直居中分为两种类型：&lt;strong>元素已知宽高&lt;/strong> 和 &lt;strong>元素未知宽高&lt;/strong>。&lt;/p></description></item><item><title>VSCode使用Prettier按ESLint格式化代码</title><link>http://localhost/posts/vscode%E4%BD%BF%E7%94%A8prettier%E6%8C%89eslint%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%BB%A3%E7%A0%81/</link><pubDate>Fri, 15 Apr 2022 18:38:41 +0000</pubDate><guid>http://localhost/posts/vscode%E4%BD%BF%E7%94%A8prettier%E6%8C%89eslint%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%BB%A3%E7%A0%81/</guid><description>&lt;p>被ESLint折腾了好几天，VSCode的配置也配了好多次，这次应该是解决了。主要目的，通过Perttier按照ESLint的标准来格式化。不用我们在手动格式化了。ESLint真是一个BT的格式化标准。&lt;/p></description></item><item><title>Vue2.x ElementUI项目总结</title><link>http://localhost/posts/vue2-elementui%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</link><pubDate>Tue, 12 Apr 2022 11:45:06 +0000</pubDate><guid>http://localhost/posts/vue2-elementui%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</guid><description>&lt;p>近一个月的Vue2 ElementUI 电商后台项目的总结。&lt;/p>
&lt;ol>
&lt;li>Vue2 的写法太累，data、mehtods都卸写在一起，除了用注释标记区分，结构上很是繁琐。vue3这块的Compositions API解决了这块的问题，期待后面要开始Vue3的项目。&lt;/li>
&lt;li>Vue东西还是很简单，主要还是需要项目来练习。&lt;/li>
&lt;li>黑马的学习视频还是不行，每次都直接把代码贴出来，念一遍，很多关联概念不解释，只说是固定写法。尚硅谷的张天禹的好太多，就是需要去跟着他的内容去理解，掰得太碎。最近在看coderwhy的视频，还可以，该讲的也讲的比较细，就是上课中间中断太多。&lt;/li>
&lt;/ol></description></item><item><title>Electron无法正常启动问题记录</title><link>http://localhost/posts/electron%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E5%90%AF%E5%8A%A8%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</link><pubDate>Wed, 06 Apr 2022 14:37:12 +0000</pubDate><guid>http://localhost/posts/electron%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E5%90%AF%E5%8A%A8%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</guid><description>&lt;p>周末折腾了一下Electron，出现了&lt;code>Electron 无法正确安装，请删除 node_modules/electron 并尝试再次安装&lt;/code>这样的错误，查了很多资料。&lt;/p>
&lt;p>恰巧中午看到了一个帖子，按照步骤基本解决启动问题了。&lt;/p></description></item><item><title>从0开始搭建Hexo博客</title><link>http://localhost/posts/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/</link><pubDate>Tue, 22 Mar 2022 17:54:31 +0000</pubDate><guid>http://localhost/posts/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/</guid><description>&lt;p>本文记录本人搭建Hexo博客的全流程。&lt;/p>
&lt;p>会在终端敲点命令，加上点前端知识会让上手更加快捷。&lt;/p></description></item></channel></rss>