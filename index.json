[{"date":"6 October, 2023","subtitle":"\u003cp\u003e\u003ccode\u003eExpress\u003c/code\u003e 是 \u003ccode\u003eNode.js\u003c/code\u003e 最受欢迎的 \u003ccode\u003eWeb\u003c/code\u003e 应用框架之一。它提供了简洁而灵活的方式来构建 \u003ccode\u003eWeb\u003c/code\u003e 服务器和 \u003ccode\u003eAPI\u003c/code\u003e。\u003ccode\u003eExpress\u003c/code\u003e 提供了一组强大的工具和功能，使得开发 \u003ccode\u003eWeb\u003c/code\u003e 应用变得简单而高效。\u003c/p\u003e","tags":"express node","title":"NodeJs 之 Express","url":"/posts/express/"},{"date":"5 October, 2023","subtitle":"\u003ch3 id=\"从redux说起\"\u003e从Redux说起\u003ca class=\"anchorjs-link\" href=\"#%e4%bb%8eredux%e8%af%b4%e8%b5%b7\"\u003e\u003c/a\u003e\u003c/h3\u003e\u003cp\u003e吐槽：\u003ccode\u003eRedux\u003c/code\u003e是\u003ccode\u003eReact\u003c/code\u003e绕不过的坑，一个据说不是\u003ccode\u003eReact\u003c/code\u003e专属的状态库（现在大部分js框架都是全家桶的年代），大量模板代码，过于复杂的学习曲线，总让我们感到困扰。\u003c/p\u003e\n\u003cp\u003e一个点击计数的\u003ccode\u003estate\u003c/code\u003e，在\u003ccode\u003eRedux\u003c/code\u003e中通常需要写\u003ccode\u003estore/index.js\u003c/code\u003e，\u003ccode\u003estore/reducer.js\u003c/code\u003e，\u003ccode\u003estore/actionCreator.js\u003c/code\u003e，\u003ccode\u003estore/constants.js\u003c/code\u003e四个文件，然后在全局通过\u003ccode\u003eProvider\u003c/code\u003e进行连接，在调用的页面还需要通过\u003ccode\u003econnect\u003c/code\u003e高阶进行包裹，然后通过props来映射，才能使用。\u003c/p\u003e\n\u003cp\u003e异步操作还需要通过第三方\u003ccode\u003eredux-thunk\u003c/code\u003e或\u003ccode\u003eredux-saga\u003c/code\u003e来实现。\u003c/p\u003e\n\u003cp\u003e所以对于这种时常会用到时常会用到但又不想去用的东西我们总是又爱又恨。好在\u003ccode\u003eReact\u003c/code\u003e的生态是丰富的，总会有更多的好用的工具出现。\u003c/p\u003e\n\u003cp\u003e下面我们来看下现在比较流行的\u003ccode\u003eRTK\u003c/code\u003e和\u003ccode\u003eZustand\u003c/code\u003e，以及我比较喜欢的\u003ccode\u003eValtio\u003c/code\u003e，通过一个相同的案例（多个状态统一管理、本地计数、异步数据、异步数据传参）对这三个状态库在\u003cstrong\u003e功能层面\u003c/strong\u003e上进行比较下，看下各自的优缺点。\u003c/p\u003e\n\u003cp\u003e实现方式：通过三个文件来写本地计数\u003ccode\u003estore/modules/counter.js\u003c/code\u003e，异步获取数据\u003ccode\u003estore/modules/post.js\u003c/code\u003e，异步数据传参\u003ccode\u003estore/modules/user.js\u003c/code\u003e。通过\u003ccode\u003estore/index.js\u003c/code\u003e来对多个状态进行统一管理导出。\u003c/p\u003e\n\u003cp\u003e最终实现效果：\u003c/p\u003e\n\u003cp\u003e\u003cfigure\u003e\n  \u003ca class=\"paragraph-image\"\u003e\n    \u003cimg data-src=\"https://p.sda1.dev/12/9ee1d5dc474cec7a6c675ada29674278/image.png\" data-action=\"zoom\" alt=\"最终效果\"  class=\"lazyload\"\u003e\n  \u003c/a\u003e\n  \n\u003c/figure\u003e\u003c/p\u003e","tags":"react redux-toolkit zustand valtio","title":"React状态横评","url":"/posts/react%E7%8A%B6%E6%80%81%E6%A8%AA%E8%AF%84/"},{"date":"5 October, 2023","subtitle":"\u003ch3 id=\"面相对象\"\u003e面相对象\u003ca class=\"anchorjs-link\" href=\"#%e9%9d%a2%e7%9b%b8%e5%af%b9%e8%b1%a1\"\u003e\u003c/a\u003e\u003c/h3\u003e\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eTS\u003c/code\u003e为前端面向对象开发带来了契机\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eJS\u003c/code\u003e语言没有类型检查，如果使用面向对象的方式开发，会产生大量的接口，而大量的接口会导致调用复杂度剧增，这种复杂度必须通过严格的类型检查来避免错误，尽管可以使用注释或文档或记忆力，但是它们没有强约束力。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eTS\u003c/code\u003e带来了完整的类型系统，因此开发复杂程序时，无论接口数量有多少，都可以获得完整的类型检查，并且这种检查是据有强约束力的。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e面向对象中有许多非常成熟的模式，能处理复杂问题\u003c/p\u003e\n\u003cp\u003e在过去的很多年中，在大型应用或复杂领域，面向对象已经积累了非常多的经验。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e","tags":"typescript","title":"TypeScript 进阶","url":"/posts/typescript-%E8%BF%9B%E9%98%B6/"},{"date":"5 October, 2023","subtitle":"\u003ch3 id=\"javascript的问题\"\u003eJavaScript的问题\u003ca class=\"anchorjs-link\" href=\"#javascript%e7%9a%84%e9%97%ae%e9%a2%98\"\u003e\u003c/a\u003e\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e使用了不存在的变量、函数或成员\u003c/li\u003e\n\u003cli\u003e把一个不确定的类型当作一个确定的类型处理\u003c/li\u003e\n\u003cli\u003e在使用null或undefined的成员\u003c/li\u003e\n\u003c/ul\u003e","tags":"typescript","title":"TypeScript 基础","url":"/posts/typescript-%E5%9F%BA%E7%A1%80/"},{"date":"18 May, 2023","subtitle":"\u003cp\u003e在使用\u003ccode\u003ereact-query\u003c/code\u003e做了几个项目以后，就感觉\u003ccode\u003ereact-query\u003c/code\u003e中的查询和请求状态管理非常方便。但逐渐发现对\u003ccode\u003ereact-query\u003c/code\u003e的使用需求在逐步发生变化：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e基本需求就是对异步数据获取的状态进行管理。\u003c/li\u003e\n\u003cli\u003e获取到数据，\u003ccode\u003ereact-query\u003c/code\u003e对数据进行缓存后，需要对缓存数据进行管理。\u003c/li\u003e\n\u003cli\u003e当需要进行数据交互通过\u003ccode\u003euseMutation\u003c/code\u003e获取到新的数据时，就需要通过之前查询数据的\u003ccode\u003euseQuery\u003c/code\u003e的\u003ccode\u003equeryKey\u003c/code\u003e修改缓存数据，通过\u003ccode\u003equery client\u003c/code\u003e中的\u003ccode\u003esetQueryData\u003c/code\u003e来修改缓存，或者使用\u003ccode\u003einvalidateQueries\u003c/code\u003e来使对应查询的\u003ccode\u003equeryKey\u003c/code\u003e让缓存失效来重新获取数据，最终就变成对\u003ccode\u003equeryKey\u003c/code\u003e的管理。\u003c/li\u003e\n\u003c/ol\u003e","tags":"react react-query","title":"Query Key Factory - React Query 的 QueryKey  查询管理工具","url":"/posts/react-query-key-factory/"},{"date":"5 May, 2023","subtitle":"\u003cp\u003e因为遇到需要使用两个github账号来做不同账号的代码同步，于是学习了下。主要解决同一台电脑上两个github账号切换的问题。\n如果已经有主账号了，不需要再次生成，下面仅为副账号生成设置步骤。\u003c/p\u003e","tags":"git","title":"如何在一台电脑上配置多个Github SSH","url":"/posts/%E5%A6%82%E4%BD%95%E5%9C%A8%E4%B8%80%E5%8F%B0%E7%94%B5%E8%84%91%E4%B8%8A%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAgithub-ssh/"},{"date":"2 February, 2023","subtitle":"\u003cp\u003eReact Route 最近更新到了6.8，在6.4的版本中增加了一些新功能。应该是借鉴了remix的一些功能吧，毕竟是一个系统的产品。开发中的内卷逐渐在产品中体现了出来。\u003c/p\u003e","tags":"react react-router","title":"React Route 6.4功能","url":"/posts/react-route-6-4%E5%8A%9F%E8%83%BD/"},{"date":"12 January, 2023","subtitle":"\u003cp\u003e之前有写过文章，使用 \u003ca href=\"https://simfantasy.github.io/2022/12/14/%E4%BD%BF%E7%94%A8CSS%E5%8F%98%E9%87%8F%E7%BB%99%E9%A1%B5%E9%9D%A2%E6%B7%BB%E5%8A%A0%E6%9A%97%E9%BB%91%E6%A8%A1%E5%BC%8F/\" target=\"_blank\"\u003e使用CSS变量给页面添加暗黑模式\u003c/a\u003e，本文算是前面这篇文章的补充吧，每次都要搞一堆不同颜色的色板也很是麻烦，体力活总有办法优化的。\u003c/p\u003e\n\u003cp\u003e借助\u003ccode\u003eant-design/colors\u003c/code\u003e这个包，能帮助我们快速实现色板。\u003c/p\u003e","tags":"react css","title":"快速生成自己的色板样式模板","url":"/posts/%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E8%87%AA%E5%B7%B1%E7%9A%84%E8%89%B2%E6%9D%BF%E6%A0%B7%E5%BC%8F%E6%A8%A1%E6%9D%BF/"},{"date":"14 December, 2022","subtitle":"\u003cp\u003e之前有使用\u003ccode\u003eStyled Components\u003c/code\u003e的方式在页面中添加主题 \u003ca href=\"https://simfantasy.github.io/2022/07/29/Styled-Components-Context-%E6%89%93%E9%80%A0%E4%B8%BB%E9%A2%98%E5%88%87%E6%8D%A2/\" target=\"_blank\"\u003eStyled Components + Context 打造主题切换\u003c/a\u003e，但是过于繁琐和麻烦。于是之前又学习了下\u003ccode\u003eChakra\u003c/code\u003e的暗黑模式，感觉也很麻烦，对于不想用\u003ccode\u003eChakra\u003c/code\u003e框架，这种方式就很麻烦。前两天正好看到B站一小哥说这个用\u003ccode\u003eCSS变量\u003c/code\u003e的方式添加暗黑模式，遂学习了下，果然方便太多。\u003c/p\u003e","tags":"react css","title":"使用CSS变量给页面添加暗黑模式","url":"/posts/%E4%BD%BF%E7%94%A8css%E5%8F%98%E9%87%8F%E7%BB%99%E9%A1%B5%E9%9D%A2%E6%B7%BB%E5%8A%A0%E6%9A%97%E9%BB%91%E6%A8%A1%E5%BC%8F/"},{"date":"3 December, 2022","subtitle":"\u003cp\u003e使用ChakraUI可以快速切换暗黑模式。并且可以用来做主题切换，提供了一系列的钩子和函数使用起来非常方便。\u003c/p\u003e","tags":"react chakraui","title":"ChakraUI 暗黑模式切换","url":"/posts/chakraui-%E6%9A%97%E9%BB%91%E6%A8%A1%E5%BC%8F%E5%88%87%E6%8D%A2/"},{"date":"10 November, 2022","subtitle":"这里主要记录下Auth这块的使用。功能上基本同之前的NextAuth差不多。但是 Firebase 并不是一个单一的权限系统，和数据等很多功能整合在一起了，所","tags":"react firebase","title":"Firebase学习笔记之Auth和storage","url":"/posts/firebase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bauth%E5%92%8Cstorage/"},{"date":"10 November, 2022","subtitle":"\u003cp\u003e\u003ccode\u003eFirebase\u003c/code\u003e是\u003ccode\u003eGoogle\u003c/code\u003e的一个线上数据服务，提供在线的数据库和权限、资源存储等。这次一起来学习一下。\u003c/p\u003e\n\u003cp\u003e教程可以参考 The Net Ninja 大神的\u003ca href=\"https://www.youtube.com/playlist?list=PL4cUxeGkcC9jERUGvbudErNCeSZHWUVlb\" target=\"_blank\"\u003eFirebase 9 Tutorial\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e因为\u003ccode\u003eFirebase\u003c/code\u003e的内容太多，我们分了两个部分。这个部分是数据的\u003ccode\u003eCURD\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e‍\u003c/p\u003e","tags":"react firebase","title":"Firebase学习笔记之Firestore","url":"/posts/firebase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bfirestore/"},{"date":"3 November, 2022","subtitle":"\u003cp\u003e经常会拿网易云音乐的API做些测试，每次找接口都要找半天，索性自己整理下经常会用到的，方便以后使用。都是大神们的接口，仅做分类整理。\u003c/p\u003e","tags":"api","title":"网易云音乐常用API","url":"/posts/%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E5%B8%B8%E7%94%A8api/"},{"date":"29 October, 2022","subtitle":"\u003cp\u003e\u003ccode\u003estyled-components\u003c/code\u003e和\u003ccode\u003eemotion\u003c/code\u003e中作媒体查询很麻烦，不如\u003ccode\u003escss\u003c/code\u003e中的\u003ccode\u003emixin\u003c/code\u003e来的简单。从\u003ccode\u003eemotion\u003c/code\u003e上找到一个包\u003ccode\u003efacepaint\u003c/code\u003e，能在一定程度上优化代码，减少代码量，但也不能像正常写\u003ccode\u003ecss\u003c/code\u003e那样去写样式了，只能用驼峰的方式写成对象形式的样式。我们来分别看下这三种方式的媒体查询：\u003c/p\u003e","tags":"react styled-components","title":"Styled-components中使用媒体查询","url":"/posts/styled-components%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2/"},{"date":"27 October, 2022","subtitle":"\u003cp\u003eAuth0是一个第三方身份验证的工具。通过配置可以调用Auth0的注册、登录，配置指定回调地址就可以很快实现身份验证的功能。\u003c/p\u003e","tags":"react auth0","title":"Auth0身份验证","url":"/posts/auth0%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/"},{"date":"21 October, 2022","subtitle":"\u003cp\u003e终于二刷了 Codevolution 大佬的这个系列，感觉比第一次确实是有了更多的理解。配合之前的\u003ccode\u003eforomik\u003c/code\u003e使用杠杠滴~\u003c/p\u003e\n\u003cp\u003e教程地址：\u003ca href=\"https://www.youtube.com/playlist?list=PLC3y8-rFHvwjTELCrPrcZlo6blLBUspd2\" target=\"_blank\"\u003eReact Query Tutorial for Beginners\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eReactQuery 官方地址：\u003ca href=\"https://tanstack.com/\" target=\"_blank\"\u003eReactQuery\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e部分中文文档地址：\u003ca href=\"https://cangsdarm.github.io/react-query-web-i18n/\" target=\"_blank\"\u003eTanstact Query 中文文档\u003c/a\u003e\u003c/p\u003e","tags":"react react-query","title":"React Query学习笔记","url":"/posts/react-query%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"date":"18 October, 2022","subtitle":"\u003cp\u003e这部分主要是示例练习。将\u003ccode\u003einput\u003c/code\u003e、\u003ccode\u003etextarea\u003c/code\u003e、\u003ccode\u003eselect\u003c/code\u003e、\u003ccode\u003eradio\u003c/code\u003e、\u003ccode\u003echeckbox\u003c/code\u003e、\u003ccode\u003edata\u003c/code\u003e封装成\u003ccode\u003eFormik\u003c/code\u003e的组件，在使用时简化操作，并在几个简单的案例中使用。\u003c/p\u003e\n\u003cp\u003e‍\u003c/p\u003e","tags":"react formik","title":"Formik学习笔记之二","url":"/posts/formik%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%BA%8C/"},{"date":"18 October, 2022","subtitle":"\u003cp\u003e继续挖Codevolution大佬的教程。form在很多场景都会用到，最少都是一个登录注册。使用Formik可以大大简化数据收集以及表单验证的过程。油管上大佬教程的地址奉上：\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.youtube.com/playlist?list=PLC3y8-rFHvwiPmFbtzEWjESkqBVDbdgGu\" target=\"_blank\"\u003eReact Formik Tutorial\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e结合\u003ccode\u003ereact-query\u003c/code\u003e提交表单数据很犀利。\u003c/p\u003e","tags":"react formik","title":"Formik学习笔记之一","url":"/posts/formik%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%B8%80/"},{"date":"12 October, 2022","subtitle":"\u003cp\u003e延续之前Strapi的使用，Strapi已经做了很完整的权限，并且给了API，所以结合之前的博客内容，完成对应的登录、注册与鉴权。\u003c/p\u003e\n\u003cp\u003e之前博客在公共模式\u003ccode\u003ePublic\u003c/code\u003e下是可以直接访问到对应的文章，这次我们取消\u003ccode\u003ePublic\u003c/code\u003e的\u003ccode\u003efind\u003c/code\u003e和\u003ccode\u003efindone\u003c/code\u003e的权限。并给\u003ccode\u003eAuthenticated\u003c/code\u003e配置对应的\u003ccode\u003ePost\u003c/code\u003e权限。在\u003ccode\u003eStrapi\u003c/code\u003e中调整完成后开始代码。\u003c/p\u003e\n\u003cp\u003e‍\u003c/p\u003e","tags":"react strapi","title":"Strapi用户登录鉴权","url":"/posts/strapi%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E9%89%B4%E6%9D%83/"},{"date":"8 October, 2022","subtitle":"\u003cp\u003eNextJs已经学了，需要搞个项目练下手，看到油管上很多NextJs+Strapi的视频，因为之前也看过相关的视频，但没有仔细研究，这次刚好十一，抓紧时间看了下。Strapi还是个很犀利的工具，感觉后面可以多用这个来做些东西。\u003c/p\u003e","tags":"react strapi graphQL","title":"Strapi + Graphql 使用小记","url":"/posts/strapi-graphql-%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%AE%B0/"},{"date":"1 October, 2022","subtitle":"\u003cp\u003e这个是一个用户身份验证的示例。\u003c/p\u003e\n\u003cp\u003eNextJs提供了一个身份验证的库\u003ccode\u003enext auth\u003c/code\u003e，使用这个库可以很轻松的做身份验证。\u003c/p\u003e\n\u003cp\u003e示例使用Github的用户身份登录。\u003c/p\u003e\n\u003cp\u003e由于版本问题，跟视频里说的一些内容有出入。根据官方文档来做了调整，代码做了很多优化，写起来更少了。\u003c/p\u003e","tags":"react nextjs","title":"NextJS重新学习之三","url":"/posts/nextjs%E9%87%8D%E6%96%B0%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%B8%89/"},{"date":"1 October, 2022","subtitle":"\u003cp\u003eNextJs学习笔记第二部分。基础知识，接上一篇。\u003c/p\u003e","tags":"react nextjs","title":"NextJS重新学习之二","url":"/posts/nextjs%E9%87%8D%E6%96%B0%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BA%8C/"},{"date":"1 October, 2022","subtitle":"\u003cp\u003e国内的NextJs资料太少了，B站上找了下讲的很少，官网又是一个挂着中文文档的英文文档。在YouTube上找了下，英文的资料还是很多。\u003c/p\u003e\n\u003cp\u003e找到了这个\u003ccode\u003eCodevolution\u003c/code\u003e大神的教程，79个视频的播放列表。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.youtube.com/playlist?list=PLC3y8-rFHvwgC9mj0qv972IO5DmD-H0ZH\" target=\"_blank\"\u003eNext.js Tutorial for Beginners\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e以下是学习笔记。\u003c/p\u003e","tags":"react nextjs","title":"NextJS重新学习之一","url":"/posts/nextjs%E9%87%8D%E6%96%B0%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%B8%80/"},{"date":"13 September, 2022","subtitle":"\u003cp\u003e有的时候就是遇到麻烦了才回去想解决办法。这不，今天在公司装了1个小时的ESLint，魔障了一样，就是有问题。于是回家的路上看了下有没有类似的解决办法，就看到了这个神器——\u003ccode\u003evite-pretty-lint\u003c/code\u003e\u003c/p\u003e","tags":"vite eslint prettier","title":"使用vite-pretty-lint更加快速的配置ESLint和Prettier","url":"/posts/%E4%BD%BF%E7%94%A8vite-pretty-lint%E6%9B%B4%E5%8A%A0%E5%BF%AB%E9%80%9F%E7%9A%84%E9%85%8D%E7%BD%AEeslint%E5%92%8Cprettier/"},{"date":"19 August, 2022","subtitle":"\u003cp\u003e上周看到vant react版升到了3，发现弄了很多新东西，其中就有将所有的Icon都换成了svg的了。于是研究了下，传统的fonts和css的组合似乎，因为字体文件的存在，打包会影响包体积，所以用svg加上打包工具的Tree Shaking，只需要将用到的图标保留，没用的不打包进去就可以了。另外，svg的矢量显示效果比字体图标显示效果更好，所以，svg将会是以后更多的选择。\u003c/p\u003e","tags":"react icon","title":"攒个Icon组件2.0","url":"/posts/%E6%94%92%E4%B8%AAicon%E7%BB%84%E4%BB%B62-0/"},{"date":"8 August, 2022","subtitle":"\u003cp\u003e最近在做Mac版的Netease Music的项目，在参考大佬的源码的时候看到了这个方法\u003ccode\u003eObject.entries\u003c/code\u003e，感觉甚妙，故记录之。\u003c/p\u003e\n\u003cp\u003e在项目中，有个歌单分类，返回的数据中，一组为一级分类的对象，一组为二级分类的数组。二级分类上有一级分类的值。\u003c/p\u003e\n\u003cp\u003e参考地址：\u003ca href=\"https://netease-cloud-music-api-one-peach.vercel.app/playlist/catlist\" target=\"_blank\"\u003e歌单分类API\u003c/a\u003e\u003c/p\u003e","tags":"react javascript","title":"Object.entries方法","url":"/posts/object-entries%E6%96%B9%E6%B3%95/"},{"date":"29 July, 2022","subtitle":"\u003cp\u003e这两天在看\u003ccode\u003eMantine\u003c/code\u003e，里面有自带的主题切换，试了下，感觉过于复杂\u003ccode\u003econtext\u003c/code\u003e的\u003ccode\u003ePrivoder\u003c/code\u003e都要包两层，另外\u003ccode\u003eMantine\u003c/code\u003e的css in js 方案使用的是\u003ccode\u003eemotion\u003c/code\u003e，过于小众和繁琐，不如在\u003ccode\u003estyled-components\u003c/code\u003e中写\u003ccode\u003ecss\u003c/code\u003e的流畅。所以翻了很久掘金挖宝，果然挖到一宝。Up是椒盐味花生米，使用\u003ccode\u003econtext\u003c/code\u003e修改\u003ccode\u003estyled-components\u003c/code\u003e的\u003ccode\u003eGlobalStyle\u003c/code\u003e，并且将配色方案保存在\u003ccode\u003elocalstorage\u003c/code\u003e中，重启浏览器效果依然得以保存。但是他的方案使用的是\u003ccode\u003eredux toolkit\u003c/code\u003e，并且只能切换明亮和暗黑两种主题，我改成了\u003ccode\u003emobx\u003c/code\u003e和多主题，本来想用更轻量的\u003ccode\u003eJotai\u003c/code\u003e状态库来试下的，但是\u003ccode\u003eJotai\u003c/code\u003e还没摸透，等下次吧。\u003c/p\u003e","tags":"react styled-components","title":"Styled Components + Context 打造主题切换","url":"/posts/styled-components-context-%E6%89%93%E9%80%A0%E4%B8%BB%E9%A2%98%E5%88%87%E6%8D%A2/"},{"date":"28 July, 2022","subtitle":"\u003cp\u003e经常会用到RemixIcon的图标，所以每次都得整半天，所以干脆攒个Icon的组件好了，下次直接用。\u003c/p\u003e","tags":"react icon","title":"攒个Icon组件","url":"/posts/%E6%94%92%E4%B8%AAicon%E7%BB%84%E4%BB%B6/"},{"date":"27 July, 2022","subtitle":"\u003cp\u003e还是React Router V6，在v5的时候组件懒加载只需要在路由页面使用\u003ccode\u003elazy\u003c/code\u003e方法\u003ccode\u003eimport\u003c/code\u003e组件后，然后在App组件外层包一层\u003ccode\u003eSuspense\u003c/code\u003e后就可以实现了，在v6里就搞得很麻烦，因为\u003ccode\u003eSuspense\u003c/code\u003e包在了每个路由的外面。\u003c/p\u003e","tags":"react react-router","title":"React Router v6 组件懒加载","url":"/posts/react-router-v6-%E7%BB%84%E4%BB%B6%E6%87%92%E5%8A%A0%E8%BD%BD/"},{"date":"27 July, 2022","subtitle":"\u003cp\u003e之前在做看Coderwhy的网易云音乐的项目时，遇到了一个问题，因为网易云音乐在进入站点后，会从根目录跳转到三级目录下，经过 \u003ccode\u003e发现 （Discover）\u003c/code\u003e，到\u003ccode\u003e推荐 （recommend）\u003c/code\u003e页面。coderwhy是用的react-router-dom v5的版本，所以使用了react-router-config这个插件，可以render到一个目录下，但react-router-dom v6的版本 react-router-config这个插件就用不了了，只能使用\u003ccode\u003euseRoutes\u003c/code\u003e这个来代替之前的集中式路由导航。这个里面并没有render这个方法，一些api也有变化，没有direct，使用Navigate来代替了。总之搞得头很大。\u003c/p\u003e\n\u003cp\u003e试了很多方法，v6，在跳转到二级目录后，则不能直接跳转到三级，今天在小破站看到大神介绍v6 的一些功能，受到了一些启发，他是做到页面上的\u003ccode\u003eRoutes\u003c/code\u003e和\u003ccode\u003eRoute\u003c/code\u003e路由配置，跟\u003ccode\u003euseRoutes\u003c/code\u003e这块的路由还是区别很大，\u003ccode\u003euseRouter\u003c/code\u003e这种和\u003ccode\u003evue-router\u003c/code\u003e的配置就很像了。但是还是缺了\u003ccode\u003evue-router\u003c/code\u003e的路由守卫\u0026hellip;\u003c/p\u003e","tags":"react react-router","title":"React Router V6 三级目录跳转","url":"/posts/react-router-v6-%E4%B8%89%E7%BA%A7%E7%9B%AE%E5%BD%95%E8%B7%B3%E8%BD%AC/"},{"date":"25 July, 2022","subtitle":"\u003cp\u003eVite到3了，在React中比自带的create-react-app，快太多，用上就基本换不过去的感觉。记录下配置ESLint和Prettier，看了很多教程，配置大多都是和Typescript一起，本人还未到那个层级，只能上JS。废话少说开始干活~\u003c/p\u003e","tags":"vscode vite elint prettier","title":"React + Vite + ESLint + Prettier","url":"/posts/react-vite-eslint/"},{"date":"14 June, 2022","subtitle":"\u003cp\u003e最近在学习Next，这是一个与React相关的应用框架。最近需要使用Next做项目，所以跟着视频一起学了些东西，本文作为笔记进行记录。\u003c/p\u003e\n\u003cp\u003e因为网络上大多视频，时间比较久远，就导致很多代码的框架、模块的版本发送了很多变化，导致很多功能都发生了很大的变化，当然老的技术你可以学，但是新的还是要学的。比如：最近学了Redux，大多视频讲的都是Redux4.x，结果现在redux官方现在推荐使用ReduxToolkit。东西当然优化了很多，没有原来那么麻烦，但是资料也少啊 ，遇到很多问题，还在摸索。\u003c/p\u003e\n\u003cp\u003e出现这种情况的还有React，现在网上很多视频打着2022最新教程，讲着React16.13或者17.x的内容，现在React官方已经到了18.x了。看介绍说是优化了很多性能上的东西，但功能也有些调整，还没来得及了解。\u003c/p\u003e","tags":"react nextjs","title":"Next.js学习笔记","url":"/posts/next-js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"date":"5 May, 2022","subtitle":"\u003cp\u003e记录一下在使用ElementPlus中的一些坑。\u003c/p\u003e","tags":"vue ElementPlus 避坑指南","title":"ElementPlus的坑","url":"/posts/elementplus%E7%9A%84%E5%9D%91/"},{"date":"29 April, 2022","subtitle":"\u003cp\u003e大菠萝Pinia，号称vux5，全新的vue状态管理库。\u003c/p\u003e\n\u003cp\u003e个人感受，vuex4.x里面的概念太多了，本来vue就喜欢造概念，一堆一堆学都学不过来。vue4.x里更是繁琐的很，components要DIspatch给Actions，然后Actions要commit给Mutations，当然也可以从commponents给到Mutations，然后Mutaiions要Mutate给State。\u003c/p\u003e\n\u003cp\u003e但凡可以 get和set就别造新词了吧，真的记不住~ 搞得我看了好几遍，现在还是没啥概念。\u003c/p\u003e\n\u003cp\u003ePinia就好很多 Actions既可以同步也可以异步，没分开。数据传递也很简单。看着教程就很容易的上手。\u003c/p\u003e","tags":"pinia vuex vue","title":"Pinia使用小结","url":"/posts/pinia%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/"},{"date":"29 April, 2022","subtitle":"\u003cp\u003e基础差就只能慢慢补，这两天把字符串操作的方法整理了下，平常用的也就只有几个，但是一整理就发现有一大堆。\u003c/p\u003e\n\u003cp\u003e常用\u003ccode\u003eindexOf()\u003c/code\u003e、\u003ccode\u003esplit()\u003c/code\u003e、\u003ccode\u003eslice()\u003c/code\u003e、\u003ccode\u003etoLowerCase()\u003c/code\u003e、\u003ccode\u003etoUpperCase()\u003c/code\u003e、\u003ccode\u003ereplace()\u003c/code\u003e、\u003ccode\u003etrim()\u003c/code\u003e、\u003ccode\u003epadStart()\u003c/code\u003e、\u003ccode\u003eparseInt()\u003c/code\u003e\u003c/p\u003e","tags":"javascript","title":"JavaScript字符串操作整理","url":"/posts/javascript%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E6%95%B4%E7%90%86/"},{"date":"18 April, 2022","subtitle":"\u003cp\u003e很久没见到这么干的文章，拉屎的时候刷到让我便意似乎没了。赶紧拜读了一遍，默默关注了大神。\u003c/p\u003e\n\u003cp\u003e原来面试的时候经常会问这个问题，大多数能讲出三四个我已经觉得很了不起了。我自己也大概只知道五六种，感觉前端的发展太快很多东西学不动只能让自己不断落后。所以该记录的记录下来，该改进的改进改进，逆水行舟冷暖自知。\u003c/p\u003e\n\u003cp\u003e水平居中比较简单，垂直居中由于浏览器的原因会有很多差异，如果用上flex幸福感会提升很多，考虑到兼容性，似乎就没那么多幸福了\u0026hellip;\u003c/p\u003e\n\u003cp\u003e垂直居中分为两种类型：\u003cstrong\u003e元素已知宽高\u003c/strong\u003e 和 \u003cstrong\u003e元素未知宽高\u003c/strong\u003e。\u003c/p\u003e","tags":"css","title":"CSS垂直居中的完全体","url":"/posts/css%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%84%E5%AE%8C%E5%85%A8%E4%BD%93/"},{"date":"15 April, 2022","subtitle":"\u003cp\u003e被ESLint折腾了好几天，VSCode的配置也配了好多次，这次应该是解决了。主要目的，通过Perttier按照ESLint的标准来格式化。不用我们在手动格式化了。ESLint真是一个BT的格式化标准。\u003c/p\u003e","tags":"vscode vue eslint prettier","title":"VSCode使用Prettier按ESLint格式化代码","url":"/posts/vscode%E4%BD%BF%E7%94%A8prettier%E6%8C%89eslint%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%BB%A3%E7%A0%81/"},{"date":"12 April, 2022","subtitle":"\u003cp\u003e近一个月的Vue2 ElementUI 电商后台项目的总结。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eVue2 的写法太累，data、mehtods都卸写在一起，除了用注释标记区分，结构上很是繁琐。vue3这块的Compositions API解决了这块的问题，期待后面要开始Vue3的项目。\u003c/li\u003e\n\u003cli\u003eVue东西还是很简单，主要还是需要项目来练习。\u003c/li\u003e\n\u003cli\u003e黑马的学习视频还是不行，每次都直接把代码贴出来，念一遍，很多关联概念不解释，只说是固定写法。尚硅谷的张天禹的好太多，就是需要去跟着他的内容去理解，掰得太碎。最近在看coderwhy的视频，还可以，该讲的也讲的比较细，就是上课中间中断太多。\u003c/li\u003e\n\u003c/ol\u003e","tags":"vue elementui","title":"Vue2.x ElementUI项目总结","url":"/posts/vue2-elementui%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"},{"date":"6 April, 2022","subtitle":"\u003cp\u003e周末折腾了一下Electron，出现了\u003ccode\u003eElectron 无法正确安装，请删除 node_modules/electron 并尝试再次安装\u003c/code\u003e这样的错误，查了很多资料。\u003c/p\u003e\n\u003cp\u003e恰巧中午看到了一个帖子，按照步骤基本解决启动问题了。\u003c/p\u003e","tags":"electron","title":"Electron无法正常启动问题记录","url":"/posts/electron%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E5%90%AF%E5%8A%A8%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"date":"22 March, 2022","subtitle":"\u003cp\u003e本文记录本人搭建Hexo博客的全流程。\u003c/p\u003e\n\u003cp\u003e会在终端敲点命令，加上点前端知识会让上手更加快捷。\u003c/p\u003e","tags":"hexo","title":"从0开始搭建Hexo博客","url":"/posts/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/"}]